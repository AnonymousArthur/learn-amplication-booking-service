/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateBookingOrderArgs } from "./CreateBookingOrderArgs";
import { UpdateBookingOrderArgs } from "./UpdateBookingOrderArgs";
import { DeleteBookingOrderArgs } from "./DeleteBookingOrderArgs";
import { BookingOrderCountArgs } from "./BookingOrderCountArgs";
import { BookingOrderFindManyArgs } from "./BookingOrderFindManyArgs";
import { BookingOrderFindUniqueArgs } from "./BookingOrderFindUniqueArgs";
import { BookingOrder } from "./BookingOrder";
import { User } from "../../user/base/User";
import { Resource } from "../../resource/base/Resource";
import { StoreEntity } from "../../storeEntity/base/StoreEntity";
import { BookingOrderService } from "../bookingOrder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BookingOrder)
export class BookingOrderResolverBase {
  constructor(
    protected readonly service: BookingOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "read",
    possession: "any",
  })
  async _bookingOrdersMeta(
    @graphql.Args() args: BookingOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BookingOrder])
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "read",
    possession: "any",
  })
  async bookingOrders(
    @graphql.Args() args: BookingOrderFindManyArgs
  ): Promise<BookingOrder[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BookingOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "read",
    possession: "own",
  })
  async bookingOrder(
    @graphql.Args() args: BookingOrderFindUniqueArgs
  ): Promise<BookingOrder | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BookingOrder)
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "create",
    possession: "any",
  })
  async createBookingOrder(
    @graphql.Args() args: CreateBookingOrderArgs
  ): Promise<BookingOrder> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        createdBy: args.data.createdBy
          ? {
              connect: args.data.createdBy,
            }
          : undefined,

        owner: args.data.owner
          ? {
              connect: args.data.owner,
            }
          : undefined,

        resource: args.data.resource
          ? {
              connect: args.data.resource,
            }
          : undefined,

        storeEntity: args.data.storeEntity
          ? {
              connect: args.data.storeEntity,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BookingOrder)
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "update",
    possession: "any",
  })
  async updateBookingOrder(
    @graphql.Args() args: UpdateBookingOrderArgs
  ): Promise<BookingOrder | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          createdBy: args.data.createdBy
            ? {
                connect: args.data.createdBy,
              }
            : undefined,

          owner: args.data.owner
            ? {
                connect: args.data.owner,
              }
            : undefined,

          resource: args.data.resource
            ? {
                connect: args.data.resource,
              }
            : undefined,

          storeEntity: args.data.storeEntity
            ? {
                connect: args.data.storeEntity,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BookingOrder)
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "delete",
    possession: "any",
  })
  async deleteBookingOrder(
    @graphql.Args() args: DeleteBookingOrderArgs
  ): Promise<BookingOrder | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "createdBy",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldCreatedBy(
    @graphql.Parent() parent: BookingOrder
  ): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "owner",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldOwner(
    @graphql.Parent() parent: BookingOrder
  ): Promise<User | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Resource, {
    nullable: true,
    name: "resource",
  })
  @nestAccessControl.UseRoles({
    resource: "Resource",
    action: "read",
    possession: "any",
  })
  async resolveFieldResource(
    @graphql.Parent() parent: BookingOrder
  ): Promise<Resource | null> {
    const result = await this.service.getResource(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => StoreEntity, {
    nullable: true,
    name: "storeEntity",
  })
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "read",
    possession: "any",
  })
  async resolveFieldStoreEntity(
    @graphql.Parent() parent: BookingOrder
  ): Promise<StoreEntity | null> {
    const result = await this.service.getStoreEntity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
