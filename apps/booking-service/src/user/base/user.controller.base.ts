/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { BookingOrderFindManyArgs } from "../../bookingOrder/base/BookingOrderFindManyArgs";
import { BookingOrder } from "../../bookingOrder/base/BookingOrder";
import { BookingOrderWhereUniqueInput } from "../../bookingOrder/base/BookingOrderWhereUniqueInput";
import { StoreEntityFindManyArgs } from "../../storeEntity/base/StoreEntityFindManyArgs";
import { StoreEntity } from "../../storeEntity/base/StoreEntity";
import { StoreEntityWhereUniqueInput } from "../../storeEntity/base/StoreEntityWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bookingTransactions")
  @ApiNestedQuery(BookingOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "read",
    possession: "any",
  })
  async findManyBookingTransactions(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<BookingOrder[]> {
    const query = plainToClass(BookingOrderFindManyArgs, request.query);
    const results = await this.service.findBookingTransactions(params.id, {
      ...query,
      select: {
        bookingNo: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        owner: {
          select: {
            id: true,
          },
        },

        resource: {
          select: {
            id: true,
          },
        },

        storeEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookingTransactions")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectBookingTransactions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingTransactions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookingTransactions")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateBookingTransactions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingTransactions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookingTransactions")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectBookingTransactions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingTransactions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/owningBookingOrder")
  @ApiNestedQuery(BookingOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "read",
    possession: "any",
  })
  async findManyOwningBookingOrder(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<BookingOrder[]> {
    const query = plainToClass(BookingOrderFindManyArgs, request.query);
    const results = await this.service.findOwningBookingOrder(params.id, {
      ...query,
      select: {
        bookingNo: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        owner: {
          select: {
            id: true,
          },
        },

        resource: {
          select: {
            id: true,
          },
        },

        storeEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/owningBookingOrder")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectOwningBookingOrder(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      owningBookingOrder: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/owningBookingOrder")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateOwningBookingOrder(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      owningBookingOrder: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/owningBookingOrder")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectOwningBookingOrder(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      owningBookingOrder: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/storeEntities")
  @ApiNestedQuery(StoreEntityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "read",
    possession: "any",
  })
  async findManyStoreEntities(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<StoreEntity[]> {
    const query = plainToClass(StoreEntityFindManyArgs, request.query);
    const results = await this.service.findStoreEntities(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        status: true,
        storeType: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/storeEntities")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectStoreEntities(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StoreEntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      storeEntities: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/storeEntities")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateStoreEntities(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StoreEntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      storeEntities: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/storeEntities")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectStoreEntities(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: StoreEntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      storeEntities: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
