/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BookingOrder } from "../../bookingOrder/base/BookingOrder";
import {
  ValidateNested,
  IsOptional,
  IsDate,
  IsString,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { User } from "../../user/base/User";
import { EnumStoreEntityStatus } from "./EnumStoreEntityStatus";
import { StoreResource } from "../../storeResource/base/StoreResource";

@ObjectType()
class StoreEntity {
  @ApiProperty({
    required: false,
    type: () => [BookingOrder],
  })
  @ValidateNested()
  @Type(() => BookingOrder)
  @IsOptional()
  bookingTransactions?: Array<BookingOrder>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  location!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  owner?: User;

  @ApiProperty({
    required: false,
    enum: EnumStoreEntityStatus,
  })
  @IsEnum(EnumStoreEntityStatus)
  @IsOptional()
  @Field(() => EnumStoreEntityStatus, {
    nullable: true,
  })
  status?: "opening" | "closed" | "renovating" | null;

  @ApiProperty({
    required: false,
    type: () => [StoreResource],
  })
  @ValidateNested()
  @Type(() => StoreResource)
  @IsOptional()
  storeResources?: Array<StoreResource>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  storeType!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { StoreEntity as StoreEntity };
