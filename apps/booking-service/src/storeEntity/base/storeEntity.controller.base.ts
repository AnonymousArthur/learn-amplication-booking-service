/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StoreEntityService } from "../storeEntity.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StoreEntityCreateInput } from "./StoreEntityCreateInput";
import { StoreEntityWhereInput } from "./StoreEntityWhereInput";
import { StoreEntityWhereUniqueInput } from "./StoreEntityWhereUniqueInput";
import { StoreEntityFindManyArgs } from "./StoreEntityFindManyArgs";
import { StoreEntityUpdateInput } from "./StoreEntityUpdateInput";
import { StoreEntity } from "./StoreEntity";
import { BookingOrderFindManyArgs } from "../../bookingOrder/base/BookingOrderFindManyArgs";
import { BookingOrder } from "../../bookingOrder/base/BookingOrder";
import { BookingOrderWhereUniqueInput } from "../../bookingOrder/base/BookingOrderWhereUniqueInput";
import { StoreResourceFindManyArgs } from "../../storeResource/base/StoreResourceFindManyArgs";
import { StoreResource } from "../../storeResource/base/StoreResource";
import { StoreResourceWhereUniqueInput } from "../../storeResource/base/StoreResourceWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StoreEntityControllerBase {
  constructor(
    protected readonly service: StoreEntityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StoreEntity })
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: StoreEntityCreateInput
  ): Promise<StoreEntity> {
    return await this.service.create({
      data: {
        ...data,

        owner: {
          connect: data.owner,
        },
      },
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        status: true,
        storeType: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [StoreEntity] })
  @ApiNestedQuery(StoreEntityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<StoreEntity[]> {
    const args = plainToClass(StoreEntityFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        status: true,
        storeType: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StoreEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: StoreEntityWhereUniqueInput
  ): Promise<StoreEntity | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        status: true,
        storeType: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StoreEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: StoreEntityWhereUniqueInput,
    @common.Body() data: StoreEntityUpdateInput
  ): Promise<StoreEntity | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          owner: {
            connect: data.owner,
          },
        },
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          status: true,
          storeType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StoreEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: StoreEntityWhereUniqueInput
  ): Promise<StoreEntity | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          status: true,
          storeType: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bookingTransactions")
  @ApiNestedQuery(BookingOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BookingOrder",
    action: "read",
    possession: "any",
  })
  async findManyBookingTransactions(
    @common.Req() request: Request,
    @common.Param() params: StoreEntityWhereUniqueInput
  ): Promise<BookingOrder[]> {
    const query = plainToClass(BookingOrderFindManyArgs, request.query);
    const results = await this.service.findBookingTransactions(params.id, {
      ...query,
      select: {
        bookingNo: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,

        owner: {
          select: {
            id: true,
          },
        },

        resource: {
          select: {
            id: true,
          },
        },

        storeEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookingTransactions")
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "update",
    possession: "any",
  })
  async connectBookingTransactions(
    @common.Param() params: StoreEntityWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingTransactions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookingTransactions")
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "update",
    possession: "any",
  })
  async updateBookingTransactions(
    @common.Param() params: StoreEntityWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingTransactions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookingTransactions")
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "update",
    possession: "any",
  })
  async disconnectBookingTransactions(
    @common.Param() params: StoreEntityWhereUniqueInput,
    @common.Body() body: BookingOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookingTransactions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/storeResources")
  @ApiNestedQuery(StoreResourceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "StoreResource",
    action: "read",
    possession: "any",
  })
  async findManyStoreResources(
    @common.Req() request: Request,
    @common.Param() params: StoreEntityWhereUniqueInput
  ): Promise<StoreResource[]> {
    const query = plainToClass(StoreResourceFindManyArgs, request.query);
    const results = await this.service.findStoreResources(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        resource: {
          select: {
            id: true,
          },
        },

        stock: true,

        storeEntity: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/storeResources")
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "update",
    possession: "any",
  })
  async connectStoreResources(
    @common.Param() params: StoreEntityWhereUniqueInput,
    @common.Body() body: StoreResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      storeResources: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/storeResources")
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "update",
    possession: "any",
  })
  async updateStoreResources(
    @common.Param() params: StoreEntityWhereUniqueInput,
    @common.Body() body: StoreResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      storeResources: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/storeResources")
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "update",
    possession: "any",
  })
  async disconnectStoreResources(
    @common.Param() params: StoreEntityWhereUniqueInput,
    @common.Body() body: StoreResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      storeResources: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
