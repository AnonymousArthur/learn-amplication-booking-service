/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateStoreResourceArgs } from "./CreateStoreResourceArgs";
import { UpdateStoreResourceArgs } from "./UpdateStoreResourceArgs";
import { DeleteStoreResourceArgs } from "./DeleteStoreResourceArgs";
import { StoreResourceCountArgs } from "./StoreResourceCountArgs";
import { StoreResourceFindManyArgs } from "./StoreResourceFindManyArgs";
import { StoreResourceFindUniqueArgs } from "./StoreResourceFindUniqueArgs";
import { StoreResource } from "./StoreResource";
import { Resource } from "../../resource/base/Resource";
import { StoreEntity } from "../../storeEntity/base/StoreEntity";
import { StoreResourceService } from "../storeResource.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StoreResource)
export class StoreResourceResolverBase {
  constructor(
    protected readonly service: StoreResourceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StoreResource",
    action: "read",
    possession: "any",
  })
  async _storeResourcesMeta(
    @graphql.Args() args: StoreResourceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StoreResource])
  @nestAccessControl.UseRoles({
    resource: "StoreResource",
    action: "read",
    possession: "any",
  })
  async storeResources(
    @graphql.Args() args: StoreResourceFindManyArgs
  ): Promise<StoreResource[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StoreResource, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StoreResource",
    action: "read",
    possession: "own",
  })
  async storeResource(
    @graphql.Args() args: StoreResourceFindUniqueArgs
  ): Promise<StoreResource | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StoreResource)
  @nestAccessControl.UseRoles({
    resource: "StoreResource",
    action: "create",
    possession: "any",
  })
  async createStoreResource(
    @graphql.Args() args: CreateStoreResourceArgs
  ): Promise<StoreResource> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        resource: {
          connect: args.data.resource,
        },

        storeEntity: {
          connect: args.data.storeEntity,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StoreResource)
  @nestAccessControl.UseRoles({
    resource: "StoreResource",
    action: "update",
    possession: "any",
  })
  async updateStoreResource(
    @graphql.Args() args: UpdateStoreResourceArgs
  ): Promise<StoreResource | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          resource: {
            connect: args.data.resource,
          },

          storeEntity: {
            connect: args.data.storeEntity,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StoreResource)
  @nestAccessControl.UseRoles({
    resource: "StoreResource",
    action: "delete",
    possession: "any",
  })
  async deleteStoreResource(
    @graphql.Args() args: DeleteStoreResourceArgs
  ): Promise<StoreResource | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Resource, {
    nullable: true,
    name: "resource",
  })
  @nestAccessControl.UseRoles({
    resource: "Resource",
    action: "read",
    possession: "any",
  })
  async resolveFieldResource(
    @graphql.Parent() parent: StoreResource
  ): Promise<Resource | null> {
    const result = await this.service.getResource(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => StoreEntity, {
    nullable: true,
    name: "storeEntity",
  })
  @nestAccessControl.UseRoles({
    resource: "StoreEntity",
    action: "read",
    possession: "any",
  })
  async resolveFieldStoreEntity(
    @graphql.Parent() parent: StoreResource
  ): Promise<StoreEntity | null> {
    const result = await this.service.getStoreEntity(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
